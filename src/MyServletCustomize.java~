
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;

import javax.servlet.ServletException;
//import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONArray;
import org.json.JSONObject;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

import Associate.TweetDebateAssociationCustomize;
import Associate.keyTermWeights;
import Data.TweetData;
import Index.IndexAllTweetsCustomize;
import Index.IndexURLs;
import Util.DirectoryFileUtil;


/**
 * Servlet implementation class MyServlet
 */
//@WebServlet("/MyServlet")
public class MyServletCustomize extends HttpServlet {
	private static final long serialVersionUID = 1L;
	public TweetDebateAssociationCustomize tda = null;
	public String path = null;
	int applyCount = 1;

    /**
     * Default constructor. 
     */
    public MyServletCustomize() {
        // TODO Auto-generated constructor stub
    	

    	//    	tda = new TweetDebateAssociation();
//		tda.initialize(".");
//		tda.associate(2, 0.7,false, ".");
    }
    public void init() throws ServletException {
    	this.path = getServletContext().getRealPath("");
    	DirectoryFileUtil dirFUtil = new DirectoryFileUtil();
    	dirFUtil.deleteFile(path + "/data/Interactions");
    	
    	/*IndexAllTweetsCustomize indexer = new IndexAllTweetsCustomize();
    	indexer.index(path);
    	IndexURLs urlIndexer = new IndexURLs();
    	urlIndexer.index(path);*/
    	
    	tda = new TweetDebateAssociationCustomize();
    	tda.initialize(path);
    	tda.associate(2,0.7,false,false);
    }
	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());

	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// doPost is going to handle all the requisitions for now
		System.out.println(request.getContextPath());
		this.path = getServletContext().getRealPath("");
		// System.out.println(this.path+"/data/stopwords_pt-br.txt");
		System.out.println(getServletContext());
		String operation = request.getParameter("operation");
		if(operation.trim().replace("\"", "").equals("load_user_data")){
			loadUserData(request.getParameter("user_id"), response);
		}else if(operation.trim().replace("\"", "").equals("apply_feedback")){
			System.out.println(response);
			applyFeedBack(request.getParameter("user_id"), request.getParameter("feedback"), response);
			
		}else{
			// default response
			response.setContentType("application/json");
			response.getWriter().write("Operation not defined: "+ operation.trim().replace("\"", ""));
			
		}
	}

	protected void loadUserData(String userId, HttpServletResponse response) throws ServletException, IOException {
		// to do...
		// maybe we don't even need to have a userID...
		
		// run ATR for the first time
		//tda = new TweetDebateAssociation();
		//tda.initialize(this.path);
		//tda.associate(2, 0.7,false, this.path);
		
		/*tda = new TweetDebateAssociation();
		tda.before("after");*/
		
		response.setContentType("application/json");
		response.getWriter().write("Data loaded!!!");
	}
	
	protected void applyFeedBack(String userId, String feedback, HttpServletResponse response) throws ServletException, IOException {
		//tda.associateInteractive(this.path);
		//tda.after();
		
		// to do...
		/*
	        user_id: "user_id"
	        tweets: [{"tweet_id_str": 123, "curr_deb": "meat inspection act", "strategy": "equal score"}, ...]
	        keywords: [{"keyword": "veterans", "curr_deb": "cbc"}, ...]
	        hashtag_deb_sim: [{"hashtag": "vote", "curr_deb": "local food"}, ...]
		 */
		
		System.out.println(feedback);
		DirectoryFileUtil dirFU = new DirectoryFileUtil();
		dirFU.clearDir(path+"/dataATRVis/Canadian/newFiles/");
		dirFU.makeNewDirectory(path+"/dataATRVis/Canadian/newFiles/");
		
		try {
			HashMap<String,String> tId2Change = new HashMap<String,String>();
			HashMap<String,String> tId2Strategy = new HashMap<String,String>();
			HashMap<String,String> keyTerm2Change = new HashMap<String,String>();
			HashMap<String,String> hashDSim2Change = new HashMap<String,String>();
			
			JSONObject feedBackObj = new JSONObject(feedback);
			//String uId = feedBackObj.get("user_id").toString();
			JSONArray tweets = feedBackObj.getJSONArray("tweets"); 
			JSONArray keyTerms = feedBackObj.getJSONArray("keywords");
			JSONArray hashDSims = feedBackObj.getJSONArray("hashtag_deb_sim");
			for (int i = 0; i < tweets.length(); i++) {
				JSONObject tweetFdBck = tweets.getJSONObject(i);
				String tId = tweetFdBck.get("tweet_id_str").toString();
				String curr_deb = tweetFdBck.get("curr_deb").toString();
				String prev_deb = tweetFdBck.get("prev_deb").toString();
				String strategy =tweetFdBck.get("strategy").toString();
				
				tId2Change.put(tId, (prev_deb + "," + curr_deb));
				tId2Strategy.put(tId, strategy);
				
			}
			
			for (int i = 0; i < keyTerms.length(); i++) {
				JSONObject keyTermFdBck = keyTerms.getJSONObject(i);
				String termStr = keyTermFdBck.get("keyword").toString();
				String curr_deb = keyTermFdBck.get("curr_deb").toString();
				String prev_deb = keyTermFdBck.get("prev_deb").toString();				
				keyTerm2Change.put(termStr, (prev_deb + "," + curr_deb));
			}
			
			// hashtag debate similarities...
			for (int i = 0; i < hashDSims.length(); i++){
				JSONObject hashDSimFdBck = hashDSims.getJSONObject(i);
				String hashStr = hashDSimFdBck.get("hashtag").toString();
				String curr_deb = hashDSimFdBck.get("curr_deb").toString();
				hashDSim2Change.put(hashStr, (curr_deb));
			}
			
			//System.out.println(hashDSim2Change);
			
			tda.applyFeedBackFromVis(tId2Change,tId2Strategy,keyTerm2Change,hashDSim2Change);
			String updateStr = createResponse();
			System.out.println(updateStr);
			tda.extracVocabDistribution(true);
			tda.updateHashTagDebSim();
			
			try {
				FileOutputStream fout = new FileOutputStream(path + "/data/Interactions", true);
				BufferedWriter bout = new BufferedWriter(new OutputStreamWriter(fout));
				bout.write("Interaction " + applyCount + ":\n");
				bout.write("Number of Retrieved Tweets: " + TweetDebateAssociationCustomize.tweetId2PredictedLabel.size() + "\n");
				bout.write("Feedback: " + feedback+ "\n\n");
				bout.close();
				applyCount++;
			}
			catch (Exception e) {
				e.printStackTrace();
			}
			

			
	        response.setContentType("application/json");
			PrintWriter out = response.getWriter();
			out.print(updateStr);
			out.flush();
			
			tda.updateKeyTermsWeights = new HashMap<String,keyTermWeights>();
			tda.updateTweetsInVis = new HashMap<String,String>();
			
						//retrive tweets true and all keyterms also included
		}
		catch (Exception e) {
			e.printStackTrace();
		}
        
	}
	private String createResponse() {
		//String res = "Tweets=";
		String res = "";
		for (String tId:tda.updateTweetsInVis.keySet()) {
			String trueLab = tda.updateTweetsInVis.get(tId);
			res = res + tId + ":::true_label::" + trueLab;
			HashMap<String,Double> scores = TweetDebateAssociationCustomize.tweetId2Score.get(tId);
			if ((scores!=null) && (scores.containsKey(trueLab))) {
				res = res + ":" + scores.get(trueLab) + ";";
			}
			else {
				res = res + ":0.0;";
			}
			//System.out.println(tId);
			if (scores!=null) {
				for (String lStr:scores.keySet()) {
					if (!lStr.equalsIgnoreCase(trueLab)) {
						res = res + lStr + ":" + scores.get(lStr) + ";";
					}
					//System.out.println(lStr + "\t" + scores.get(lStr));
				}
			}
			res = res + "];";
		}
		//res = res.trim() + ",Keyterms=";
		res = res.trim() + ",";
		for (String keyStr:tda.updateKeyTermsWeights.keySet()) {
			if (TweetDebateAssociationCustomize.hashTag2TwtIdArr.containsKey(keyStr)) {
				res = res + "#" + keyStr + "::";
			}
			else {
				if (TweetDebateAssociationCustomize.userMentions.contains(keyStr)) {
					res = res + "@" + keyStr + "::";
				}
				else {
					res = res + keyStr + "::";
				}
			}
			HashMap<String, Double> weighs = tda.updateKeyTermsWeights.get(keyStr).getWeighs();
			for (String lStr:weighs.keySet()) {
				res = res + lStr + ":" + weighs.get(lStr) + ";";
			}
			res = res.trim() + "];";
		}

		return res.trim();
	}
}
